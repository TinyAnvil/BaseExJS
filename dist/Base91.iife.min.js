var Base91=function(t){"use strict";
/*
     * [BaseEx]{@link https://github.com/UmamiAppearance/BaseExJS}
     *
     * @version 0.3.2
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license GPL-3.0 AND BSD-3-Clause (Base91, Copyright (c) 2000-2006 Joachim Henke)
     */class e{constructor(t){this.root=t,"charsets"in t&&this.charsetUserToolsConstructor()}charsetUserToolsConstructor(){this.root.addCharset=(t,e)=>{if("string"!=typeof t)throw new TypeError("The charset name must be a string.");const s=this.root.converter.radix;let r=s;if("string"==typeof e||Array.isArray(e))r=e.length,e=new Set(e);else if(!(e instanceof Set))throw new TypeError("The charset must be one of the types:\n'str', 'set', 'array'.");if(e.size!==s)throw r===s?new Error("There were repetitive chars found in your charset. Make sure each char is unique."):new Error(`The the length of the charset must be ${s}.`);e=[...e].join(""),this.root.charsets[t]=e,console.log(`New charset added with the name '${t}' added and ready to use`)},this.root.setDefaultVersion=t=>[this.root.version]=this.validateArgs([t])}makeArgList(t){return t.map((t=>`'${t}'`)).join(", ")}setIOType(t,e){let s;return s=t.includes("bytes")?"bytes":t.includes("str")?"str":"in"===e?this.root.defaultInput:this.root.defaultOutput,s}getVersion(t){let e=this.root.version;return t.forEach((t=>{t in this.root.charsets&&(e=t)})),e}validateArgs(t){let e,s=null;const r=new Array;return"charsets"in this.root?(s=Object.keys(this.root.charsets),e=[...this.root.IOtypes,...s]):e=this.root.IOtypes,t.length&&t.forEach((t=>{if(t=String(t).toLowerCase(),!e.includes(t)){const e=s?`The options for version (charset) are:\n${this.makeArgList(s)}\n\n`:"";throw new TypeError(`'${t}'\n\nValid arguments for in- and output-type are:\n${this.makeArgList(this.root.IOtypes)}\n\n${e}Traceback:`)}r.push(t)})),r}validateInput(t,e){if("str"===e)return"string"!=typeof t&&this.warning("Your input was converted into a string."),String(t);if("string"==typeof t)throw new TypeError("Your provided input is a string, but some kind of (typed) Array is expected.");if(!ArrayBuffer.isView(t)&&!Array.isArray(t))throw new TypeError("Input must be some kind of (typed) Array if input type is set to 'bytes'.");return t}warning(t){Object.prototype.hasOwnProperty.call(console,"warn")?console.warn(t):console.log(`___\n${t}\n`)}}return t.Base91=class{constructor(t="default",s="str",r="str"){this.charsets={default:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~"'},this.IOtypes=["str","bytes"],this.utils=new e(this),this.utils.binPow={13:8192,14:16384},this.utils.divmod=(t,e)=>[Math.floor(t/e),t%e],[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,s,r])}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;let o=0,n=0,a="";const h=this.charsets[r];if(i.forEach((t=>{if(n+=t<<o,o+=8,o>13){let t,e,s=13,r=n%this.utils.binPow[13];r<89&&(s=14,r=n%this.utils.binPow[14]),n>>=s,o-=s,[t,e]=this.utils.divmod(r,91),a=`${a}${h[e]}${h[t]}`}})),o){let t,e;[t,e]=this.utils.divmod(n,91),a=a.concat(h[e]),(o>7||n>90)&&(a=a.concat(h[t]))}return a}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out");let i=(t=String(t).replace(/\s/g,"")).length,o=!1;i%2&&(o=!0,i--);let n=0,a=0;const h=this.charsets[s],u=new Array;for(let e=0;e<i;e+=2){const s=h.indexOf(t[e])+91*h.indexOf(t[e+1]);n=(s<<a)+n,a+=s%this.utils.binPow[13]>88?13:14;do{u.push(n%256),n>>=8,a-=8}while(a>7)}if(o){const e=t.charAt(i),s=h.indexOf(e);u.push(((s<<a)+n)%256)}const c=Uint8Array.from(u);return"bytes"===r?c:(new TextDecoder).decode(c)}},Object.defineProperty(t,"__esModule",{value:!0}),t}({});
